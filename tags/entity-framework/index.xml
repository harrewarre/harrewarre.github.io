<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>entity framework on harre.dev</title>
    <link>https://harre.dev/tags/entity-framework/</link>
    <description>Recent content in entity framework on harre.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© harre.dev</copyright>
    <lastBuildDate>Mon, 10 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://harre.dev/tags/entity-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dotnet Core Entity Framework Migrations on Cloud Foundry</title>
      <link>https://harre.dev/blog/dotnet-ef-migrations-on-cloud-foundry/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/dotnet-ef-migrations-on-cloud-foundry/</guid>
      <description>Run database migrations on Cloud Foundry using a task to ensure that migrations are only done once on deployment (and not during app start up!) for dotnet core applications. This post assumes you are deploying built applications and not raw source code.
Instead of depending on dotnet tooling (dotnet-ef), leverage the built-in migration capability of the DataContext. Interrupt the startup procedure when a special argument is passed in, instead of starting the web application, run the migrations and then exit.</description>
    </item>
    
    <item>
      <title>Multiple DbContext&#39;s with migrations on a single database</title>
      <link>https://harre.dev/blog/multiple-dbcontexts-on-a-single-database/</link>
      <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/multiple-dbcontexts-on-a-single-database/</guid>
      <description>Here is a small problem I ran into while working on my current project. This project already has an Entity Framework DbContext class with entities and a database. I&amp;rsquo;m adding a new feature but want to keep the changes as isolated as possible. So I wanted to create a second DbContext that handles the entities specific to my new feature.
Adding the context to the codebase is no hassle, just create the new class and derive it from DbContext.</description>
    </item>
    
  </channel>
</rss>
