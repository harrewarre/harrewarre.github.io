<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apps on harre.dev</title>
    <link>https://harre.dev/tags/apps/</link>
    <description>Recent content in apps on harre.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© harre.dev</copyright>
    <lastBuildDate>Tue, 05 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://harre.dev/tags/apps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Let&#39;s talk containers</title>
      <link>https://harre.dev/blog/lets-talk-containers/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/lets-talk-containers/</guid>
      <description>A recent talk by one of my buddies at ITQ sparked something and I thought I&amp;rsquo;d share that with you. It&amp;rsquo;s about containers and where they sit in a software developer point of view.
The platform stack The thing that caused the spark was this image:
Here we have a rough outline of the platform abstractions we currently see in the wild. Let&amp;rsquo;s start at the bottom.
Bare metal Let&amp;rsquo;s be quick about this one.</description>
    </item>
    
  </channel>
</rss>
