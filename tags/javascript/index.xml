<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on harre.dev</title>
    <link>https://harre.dev/tags/javascript/</link>
    <description>Recent content in Javascript on harre.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© harre.dev</copyright>
    <lastBuildDate>Fri, 19 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://harre.dev/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microsoft Edge Picture-in-Picture</title>
      <link>https://harre.dev/blog/edge-pip/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/edge-pip/</guid>
      <description>Small update: Edge now supports picture-in-picture with a little button out of the box! So you no longer need the code snippet.
 Here&amp;rsquo;s a quick little helper to pop out video players in Microsoft Edge.
requestPictureInPicture Edge (like Chrome these days) supports picture in picture mode for videos but it&amp;rsquo;s not always apparent how to actually pop out a videoplayer. Here&amp;rsquo;s a quick one-liner that you can try in the browser console:</description>
    </item>
    
    <item>
      <title>Uploading files - a simple approach</title>
      <link>https://harre.dev/blog/uploading-files-filereader/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/uploading-files-filereader/</guid>
      <description>Here&amp;rsquo;s a nice way of getting images to your server using a little bit of Javascript and HTML. We&amp;rsquo;ll be using the FileReader API that comes with Javascript and is supported in all major browsers.
For this example we&amp;rsquo;ll need some HTML from which we can select files and show a preview:
&amp;lt;div&amp;gt; &amp;lt;input id=&amp;quot;fileInput&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt; &amp;lt;button id=&amp;quot;clearFile&amp;quot;&amp;gt;Clear&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;uploadFile&amp;quot;&amp;gt;Upload&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;Preview&amp;lt;/label&amp;gt; &amp;lt;div&amp;gt; &amp;lt;img id=&amp;quot;preview&amp;quot; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  We have an input element set to type=&amp;quot;file&amp;quot; to select the file(s) we want to upload.</description>
    </item>
    
    <item>
      <title>Date validation in AngularJS</title>
      <link>https://harre.dev/blog/date-validation-in-angularjs/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/date-validation-in-angularjs/</guid>
      <description>Another angular post! This time we take a look at how to create a directive that ensures the user enters a valid date (and/or time).
Let&amp;rsquo;s start with some boilerplate stuff first. I&amp;rsquo;m going to assume that you have something working Angular already, we will only cover the date validation directive in this post. Here is some HTML.
&amp;lt;div ng-app=&amp;#34;validDateApp&amp;#34;&amp;gt; &amp;lt;div ng-form=&amp;#34;myForm&amp;#34; ng-controller=&amp;#34;testController&amp;#34;&amp;gt; &amp;lt;input ng-model=&amp;#34;myDate&amp;#34; my-valid-date name=&amp;#34;myDateInput&amp;#34; type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; And it&amp;rsquo;s Angular app to go with it:</description>
    </item>
    
    <item>
      <title>Simple dialogs with AngularJS and TypeScript</title>
      <link>https://harre.dev/blog/simple-dialogs-with-angularjs-and-typescript/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/simple-dialogs-with-angularjs-and-typescript/</guid>
      <description>While working an Angular (1) web app I ran into the age-old problem of showing the user notifications when certain conditions are met. Show them a little pop-up, in simple terms.
So what does it take to show a popup? We know the dialog element exists but cannot be used in this case due to browser requirements. The easiest way I could think of is adding a fixed positioned div the the user on top of all other content.</description>
    </item>
    
    <item>
      <title>The dialog element</title>
      <link>https://harre.dev/blog/the-dialog-element/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/the-dialog-element/</guid>
      <description>I was grinding my teeth on a z-index problem today. I needed to cover the entire webpage to show something was happening and nothing else was to interrupt. Some elements (for whatever reasons) were poking through the overlay and nothing seemed to fix my problem with the plain old position: fixed element I was using to cover the page.
So after getting fed up with looking for possible fixes I spent a bit of time looking for alternatives and came across the &amp;lt;dialog&amp;gt; element.</description>
    </item>
    
    <item>
      <title>Express route management</title>
      <link>https://harre.dev/blog/expressjs-route-management/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/expressjs-route-management/</guid>
      <description>Setting up a webserver with Node and Express is easy very easy.
Here is a small example:
var express = require(&amp;quot;express&amp;quot;); var app = express(); app.get(&amp;quot;/&amp;quot;, function (request, response) { response.send(&amp;quot;Hello world!&amp;quot;); }); app.listen(3000);  Running this and navigating to http://localhost:3000 will give you the following result:
If you only have a few of those endpoints (app.get etc.) things will be fine living in the same index.js file. But what if this starts growing?</description>
    </item>
    
    <item>
      <title>RabbitMQ with NodeJS on Cloud Foundry</title>
      <link>https://harre.dev/blog/rabbitmq-with-nodejs-on-cloud-foundry/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/rabbitmq-with-nodejs-on-cloud-foundry/</guid>
      <description>I&amp;rsquo;ve been having some more fun with Cloud Foundry deploying Node apps and wanted the apps to communicate in a more disconnected way. A messaging system is a good fit for such a requirement and lucky for me, (Pivotal) Cloud Foundry has RabbitMQ-as-a-Service for me to use.
So what are we working with? The code is Javascript running on Node, RabbitMQ for the messages and Cloud Foundry is hosting it all.</description>
    </item>
    
    <item>
      <title>POST-ing JSON to an ASP.NET Web API controller</title>
      <link>https://harre.dev/blog/posting-json-to-a-web-api-controller/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/posting-json-to-a-web-api-controller/</guid>
      <description>So you want to post some JSON to an ASP.NET Web API controller?
I bet you&amp;rsquo;ve written this more than you wanted to:
$.ajax({ type: &amp;quot;POST&amp;quot;, url: url, data: JSON.stringify(data), dataType: &amp;quot;json&amp;quot;, contentType: &amp;quot;application/json; charset=utf-8&amp;quot; });  I hate that work-around where you specify all sorts of stuff that you don&amp;rsquo;t really want to specify (like dataType, contentType, etc&amp;hellip;). This is all required because the friendlier $.post(...) will send your data in a Form encoded way.</description>
    </item>
    
    <item>
      <title>Overwriting a function in Javascript</title>
      <link>https://harre.dev/blog/overwriting-a-function-in-javascript/</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://harre.dev/blog/overwriting-a-function-in-javascript/</guid>
      <description>A quick little post about overwriting a function in Javascript.
Take the following piece of code:
function Thing() { this.Load = function () { // Do stuff some specific way. }; };  When we want to creat a new Thing we do:
var newThing = new Thing();  Easy enough. But what if we have a corner case where the Thing needs to load data in another specific way?</description>
    </item>
    
  </channel>
</rss>
