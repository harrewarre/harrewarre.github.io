<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="https://harre.dev/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>harre.dev</title>
    <link>https://harre.dev/</link>
    <atom:link href="https://harre.dev/feed.xml" rel="self" type="application/rss+xml" />
    <description>Ramblings from a guy writing code and other stuff.</description>
    <language>en</language>
    <item>
      <title>No more analytics</title>
      <link>https://harre.dev/blog/no-more-analytics/</link>
      <description>&lt;h1&gt;No more analytics&lt;/h1&gt;
&lt;p&gt;I&#39;ve decided to remove all analytics tracking from my website. The data has no meaningful purpose for me (I&#39;m not pulling in any crazy numbers of traffic to begin with) and the writing is something I do when I feel like it.&lt;/p&gt;
&lt;p&gt;I was using &lt;a href=&quot;https://www.fairanalytics.de/&quot;&gt;fairanalytics.de&lt;/a&gt; for their privacy-first stance on how analytics should be done. Highly recommended you check them out if you are looking for a privacy friendly analytics solution.&lt;/p&gt;
</description>
      <pubDate>Fri, 15 Aug 2025 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/no-more-analytics/</guid>
    </item>
    <item>
      <title>New Cloud Native Chronicles episodes</title>
      <link>https://harre.dev/blog/cloud-native-chronicles-tdd-xp/</link>
      <description>&lt;h1&gt;New Cloud Native Chronicles episodes&lt;/h1&gt;
&lt;p&gt;New episodes dropped recently and I totally forgot to post them here! Now I could create a post for each of them but nah, here you go :-)&lt;/p&gt;
&lt;h2&gt;Golden paths&lt;/h2&gt;
&lt;iframe data-testid=&quot;embed-iframe&quot; style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/5zbvylSpdW7CEPL3Gk9Dx6/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;Platform as a product&lt;/h2&gt;
&lt;iframe data-testid=&quot;embed-iframe&quot; style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/2GcoZqZrHUVLk7FQJY8I0w/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;Pair Programming&lt;/h2&gt;
&lt;iframe data-testid=&quot;embed-iframe&quot; style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/43wz0gbrIVHK1L85VOrE0B/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;Test-driven development&lt;/h2&gt;
&lt;iframe data-testid=&quot;embed-iframe&quot; style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/0adgKgY2rxQY3l00Oh5zwm/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;</description>
      <pubDate>Tue, 15 Jul 2025 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/cloud-native-chronicles-tdd-xp/</guid>
    </item>
    <item>
      <title>The post about AI</title>
      <link>https://harre.dev/blog/the-post-about-ai/</link>
      <description>&lt;h1&gt;The post about AI&lt;/h1&gt;
&lt;p&gt;But lets clamp that down right away, this is more about LLMs, and even more specificically, code generation using LLMs.&lt;/p&gt;
&lt;p&gt;GitHub CoPilot, Cursor, ChatGPT, you name it, it&#39;s everywhere in developer land. I&#39;ve been using Github CoPilot (in the browser for now) to have it do some work for a while now and it&#39;s been hit-and-miss. It&#39;ll do the boilerplate stuff well enough but at the same time it&#39;s very easy get served something that makes no sense.&lt;/p&gt;
&lt;p&gt;My current workflow is roughly like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be &lt;strong&gt;very&lt;/strong&gt; specific and explicit in what you want done.&lt;/li&gt;
&lt;li&gt;Read through the generated thing at least once fully and make sure I understand what the code will do.&lt;/li&gt;
&lt;li&gt;Work on refinements/improvements (this is almost a given for every attempt) and changes for things I don&#39;t need or are just plain wrong.&lt;/li&gt;
&lt;li&gt;Ask for verification by means of tests that go with the previously generated thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point I&#39;m usually happy with whatever was created and will integrate the generated code by hand into the final product, validating once more that whatever I&#39;m integrating is actually the thing I want. I&#39;m not yet convinced that whatever was generated can right go into the product I&#39;m working on.&lt;/p&gt;
&lt;p&gt;For hobby stuff and exploratory coding for ideas I generally let the LLM go wild and use whatever it brings. Speed and discovery at the cost of validation!&lt;/p&gt;
&lt;p&gt;There&#39;s more to explore here though, but I am no authority to make any calls on where this LLM trend will go. It might still improve a lot, or maybe we&#39;re stalling out... I have no idea, but here goes!&lt;/p&gt;
&lt;h2&gt;Software... reviewer?&lt;/h2&gt;
&lt;p&gt;So I&#39;ve been seeing articles from folks letting the LLM do all the work of fixing the bugs and writing the features. It sounds like living on the edge to me, but if it works it works. With enough validation, why not.&lt;/p&gt;
&lt;p&gt;But what about the developer prompting their way to a working product? Are they still a &amp;quot;software developer&amp;quot;? Or is that what a &amp;quot;prompt engineer&amp;quot; (LMAO) is? It sounds more like &amp;quot;software reviewer&amp;quot; when the AI is doing all the work and the human in the loop is just there as a safeguard, only reviewing the outputs. That does not sound like a fun job to me.&lt;/p&gt;
&lt;h2&gt;Vibe coding&lt;/h2&gt;
&lt;p&gt;I guess an extension of &amp;quot;the AI does all the work&amp;quot;, is just going with whatever is given by the LLM and trying to make it work.&lt;/p&gt;
&lt;p&gt;As mentioned already, I do this a lot for exploration, experimentation and hobby stuff. It&#39;s for me only and I&#39;m the only user. Vibe coding my way into any substantial production grade product sounds irresponsible to me. Maybe when we see more improvments in the models that are used for code generation but I feel this is flying way to close to the sun.&lt;/p&gt;
&lt;p&gt;Another aspect to this is that if you do find a bug or problem in the code and fix it, how do you prevent the LLM from making the same mistake again? If this was a human at work there would be the possibility for learning and experience but the LLM is static. Can you prompt the problem away for the next run? Update (or change) the model? Sounds a bit problematic.&lt;/p&gt;
&lt;h2&gt;The AI-native developer??&lt;/h2&gt;
&lt;p&gt;I&#39;ve seen this one come by a few times as well recently and I really don&#39;t know where to go with this. One explanation says that this type of role (?) is using AI throughout the whole development lifecycle, but then we&#39;re still generating code, docs, a pipeline, that&#39;s not much different from what most LLM use looks like I think.&lt;/p&gt;
&lt;p&gt;Another take I&#39;ve seen is that the prompts used to create the product are the source of truth and not the code. This sounds a lot like vibe coding on steroids. I would love to see this in practice for anything substantial.&lt;/p&gt;
&lt;h2&gt;The ladder&lt;/h2&gt;
&lt;p&gt;One concern I see is that while we can ramp up the productivity by generating more code, being able to review code will become more important, but the ability to review code requires experience. If there&#39;s no path to gain that experience through actual hands-on coding (because the LLM is doing all that work), how is a junior going to pick up the skills and experience to judge the output of an LLM? Where do seniors come from when there is no good way to gain practical experience and skills as a junior?&lt;/p&gt;
&lt;h2&gt;Security&lt;/h2&gt;
&lt;p&gt;Running code you didn&#39;t write and might not fully understand from a source that can confidently make mistakes and/or make stuff up... I guess you can see where this is going. Dependencies you didn&#39;t vet that are suggested by that same source? Nah...&lt;/p&gt;
&lt;h2&gt;Anyway...&lt;/h2&gt;
&lt;p&gt;This whole LLM thing is another (pretty great) tool in the toolbox. I still use regular web search for stuff but when it&#39;s something code related I generally go straight for the LLM and write out the question and ask for a sample to look at.&lt;/p&gt;
&lt;p&gt;A web search will sometimes follow up a piece of generated code when there&#39;s some halucinated non-existing crap in the sample.&lt;/p&gt;
&lt;p&gt;I don&#39;t expect the use of these tools to go away, in their current state they&#39;re great for boilerplate stuff and cranking out an idea in a very short time. If LLMs have peaked or not, I don&#39;t know but it&#39;s here to stay. Getting familiar with them and how to best use them will only add to your available tools.&lt;/p&gt;
&lt;p&gt;Just some thoughts and questions that came to me when I was off on vacation for two weeks. No real answers, more questions, thank you for reading :smile:&lt;/p&gt;
</description>
      <pubDate>Sat, 03 May 2025 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/the-post-about-ai/</guid>
    </item>
    <item>
      <title>Cloud Native Chronicles - The 10 minute build</title>
      <link>https://harre.dev/blog/chronicles-10-minute-build/</link>
      <description>&lt;h1&gt;Cloud Native Chronicles - The 10 minute build&lt;/h1&gt;
&lt;p&gt;In this episode of Cloud Native Chronicles, hosts Johan and I discuss the concept of the 10-minute build, emphasizing its importance in maintaining developer focus and efficiency.&lt;/p&gt;
&lt;p&gt;We explore the technical and cultural aspects of build processes, the significance of team dynamics, and the necessity of standardizing builds across different teams.
The conversation also touches on the balance between speed and reliability in software deployment, advocating for a culture of confidence in shipping software quickly while minimizing risks.&lt;/p&gt;
&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/6XphnYj8MECxflX0lqDs3c/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;</description>
      <pubDate>Fri, 28 Mar 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/chronicles-10-minute-build/</guid>
    </item>
    <item>
      <title>Pivotal Tracker alternatives</title>
      <link>https://harre.dev/blog/pitoval-tracker-alternatives/</link>
      <description>&lt;h1&gt;Pivotal Tracker alternatives&lt;/h1&gt;
&lt;p&gt;Pivotal Tracker is an application designed to help teams manage their projects using agile methodologies.
It allows users to create and prioritize stories, tasks, and epics, and collaborate in real-time with other developers.&lt;/p&gt;
&lt;p&gt;Sadly, Pivotal Tracker is being shut down.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://bye-tracker.net/&quot;&gt;linked site&lt;/a&gt; shows teams that are working hard to build the next iteration of this tool to allow teams to collaborate around a shared backlog of stories in real time.&lt;/p&gt;
&lt;p&gt;https://bye-tracker.net/&lt;/p&gt;
</description>
      <pubDate>Mon, 17 Mar 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/pitoval-tracker-alternatives/</guid>
    </item>
    <item>
      <title>Cloud Native Chronicles - Product Mindset</title>
      <link>https://harre.dev/blog/chronicles-product-mindset/</link>
      <description>&lt;h1&gt;Cloud Native Chronicles - Product Mindset&lt;/h1&gt;
&lt;p&gt;A new episode launched on the Cloud Native Chronicles podcast and we&#39;re talking about Product Mindset.
We&#39;re a bit all over the place with this one but I think the main message is clear: Think about what you want to build and for who.&lt;/p&gt;
&lt;p&gt;In this episode of Cloud Native Chronicles, hosts Johan and Sander explore the concept of a product mindset in software development.&lt;/p&gt;
&lt;p&gt;They discuss the differences between building software and creating a product, emphasizing the importance of understanding stakeholder needs and engaging with them throughout the development process.&lt;/p&gt;
&lt;p&gt;The conversation highlights the significance of early feedback, iterative planning, and team collaboration, using Tesla as a case study to illustrate successful product development strategies.&lt;/p&gt;
&lt;p&gt;The episode concludes with key takeaways on starting small and fostering a cultural shift towards agile methodologies.&lt;/p&gt;
&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/2snFo9vBKPjv9kCCZQUaqX/video?utm_source=generator&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
</description>
      <pubDate>Tue, 11 Mar 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/chronicles-product-mindset/</guid>
    </item>
    <item>
      <title>Cloud Native Chronicles - Balanced teams</title>
      <link>https://harre.dev/blog/cloud-native-chronicles-balanced-teams/</link>
      <description>&lt;h1&gt;Cloud Native Chronicles - Balanced teams&lt;/h1&gt;
&lt;p&gt;The first episode is out! Johan and I talk about balanced teams.&lt;/p&gt;
&lt;p&gt;In this episode of Cloud Native Chronicles, hosts Johan and Sander discuss the concept of balanced teams in cloud-native development.
They explore the essential roles needed for effective product development, the risks associated with not validating products, and the challenges posed by siloed organizations.&lt;/p&gt;
&lt;p&gt;The conversation emphasizes the importance of collaboration across disciplines and the need for leadership to drive cultural change within organizations.
Key takeaways include the necessity of diverse skill sets in teams and the dangers of building products without user validation.&lt;/p&gt;
&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/0OxImLIsqO4G2lbQAKJTKY/video?utm_source=generator&amp;t=0&quot; width=&quot;624&quot; height=&quot;351&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;</description>
      <pubDate>Wed, 26 Feb 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/cloud-native-chronicles-balanced-teams/</guid>
    </item>
    <item>
      <title>Introduction to a Self Managed Life by FUTO</title>
      <link>https://harre.dev/blog/futo-self-managed-life/</link>
      <description>&lt;h1&gt;Introduction to a Self Managed Life by FUTO&lt;/h1&gt;
&lt;p&gt;A guide to building your own sovereign cloud, from top to bottom. Everything you could self-manage is probably in here. Amazing content.&lt;/p&gt;
&lt;p&gt;https://wiki.futo.org/wiki/Introduction_to_a_Self_Managed_Life:&lt;em&gt;a_13_hour&lt;/em&gt;%26_28_minute_presentation_by_FUTO_software&lt;/p&gt;
</description>
      <pubDate>Thu, 13 Feb 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/futo-self-managed-life/</guid>
    </item>
    <item>
      <title>Best Simple System Now by Dan North</title>
      <link>https://harre.dev/blog/best-simple-system-now/</link>
      <description>&lt;h1&gt;Best Simple System Now by Dan North&lt;/h1&gt;
&lt;p&gt;A long-form post about focussing on the simplest system you can get away with &lt;strong&gt;right now&lt;/strong&gt;.
I like the idea but I bet it takes quite some discipline to not accidentally over or under-do the thing you are looking to ship.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We can do this the quick way and pay later, or the thorough way and pay now.&amp;quot; This seems to be a fundamental dichotomy in software development, between ‘perfectionism’ and ‘pragmatism’, but I do not think it has to be a trade-off at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The Best Simple System for Now is the simplest system that meets the needs of the product right now, written to an appropriate standard. It has no extraneous or over-engineered code, and any code it does have is exactly as robust and reliable as it needs to be, neither more nor less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Dan North&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;https://dannorth.net/best-simple-system-for-now/&lt;/p&gt;
</description>
      <pubDate>Mon, 03 Feb 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/best-simple-system-now/</guid>
    </item>
    <item>
      <title>Forest &amp; Desert by Beth Andres-Beck</title>
      <link>https://harre.dev/blog/forest-and-desert/</link>
      <description>&lt;h1&gt;Forest &amp;amp; Desert by Beth Andres-Beck&lt;/h1&gt;
&lt;p&gt;The article describes two distinct cultures that exist for software development. The forest and the desert.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a path from the desert to the forest, a series of small, safe steps a community can take to terraform the landscape. No developer can do it alone, and no amount of technology will get us there, but it is possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Beth Andres-Beck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;https://tidyfirst.substack.com/p/forest-and-desert&lt;/p&gt;
</description>
      <pubDate>Fri, 31 Jan 2025 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/forest-and-desert/</guid>
    </item>
    <item>
      <title>Team priorities</title>
      <link>https://harre.dev/blog/team-priorities/</link>
      <description>&lt;h1&gt;Team priorities&lt;/h1&gt;
&lt;p&gt;Not all work is equally important in the stream of stuff that needs to get done when building and shipping software. So how do you make sense of what to work on?&lt;/p&gt;
&lt;p&gt;If work items are prioritized outside your development team, you need to have a discussion about ownership. A team that does not have control over what to work on is not in a position of ownership and (assuming the team is working in good faith) cannot be held responsible for any misaligned outcomes.&lt;/p&gt;
&lt;p&gt;So the team is in control over what work that needs doing. How do you then ensure that whatever goes to the top of the list is the most important thing to work on?&lt;/p&gt;
&lt;p&gt;Every change you make to your software should have a desirable impact on some metric. Could be usability, speed, cost, flexibility or some other measure. If the proposed change doesn&#39;t really move any needles in any way, it should probably make way for something that does!&lt;/p&gt;
&lt;p&gt;In practice there will be more factors at play such as changes requested by the organization itself versus changes requested by end-users or maybe other stakeholders and the team can also &lt;a href=&quot;https://harre.dev/blog/team-priorities/false&quot;&gt;innovate and experiment by themselves&lt;/a&gt;. A balance must be found to keep make sure the most impactful changes get developed. If you ignore your end-users, satisfaction will drop and people will stop using your product to find something that does work. Ignoring the business will probably result in your team losing funding, disbanded or shut down in some other way for not aligning with the goals of the organization.&lt;/p&gt;
&lt;p&gt;It should be up to the team to figure out how to maintain that balance. Getting feedback early and often helps a lot in ensuring you are still &amp;quot;building the right thing, at the right time&amp;quot;.&lt;/p&gt;
&lt;p&gt;Keep important stakeholders in the loop of your plans and priorities and all that&#39;s left is figuring out &lt;strong&gt;how&lt;/strong&gt; to actually build the things that make a difference.&lt;/p&gt;
&lt;p&gt;Putting the development teams in charge is probably a huge shift for many organizations but stepping away from &amp;quot;feature-factories&amp;quot; (where teams are fed a stream of changes to implement without context or feedback loops) will greatly improve the sense of ownership and responsibility for the members of the teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://harre.dev/blog/team-priorities/balanced-teams.jpeg&quot; alt=&quot;Balanced Team&quot;&gt;&lt;/p&gt;
&lt;p&gt;Some great resources on getting to this new way of structuring teams and way of working can be found in the &lt;a href=&quot;https://teamtopologies.com/&quot;&gt;Team Topologies book&lt;/a&gt; and the &lt;a href=&quot;https://labspractices.com/learningpaths/application-development/balanced-teams/&quot;&gt;Balanced Teams approach&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 29 Nov 2024 01:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/team-priorities/</guid>
    </item>
    <item>
      <title>Cloud Foundry buildpack environment variables</title>
      <link>https://harre.dev/blog/cloud-foundry-buildpack-environment/</link>
      <description>&lt;h1&gt;Cloud Foundry buildpack environment variables&lt;/h1&gt;
&lt;p&gt;I recently ran into a situation I hadn&#39;t dealt with before.&lt;/p&gt;
&lt;p&gt;A Python app I was working on was loading modules from a location outside of Pythons known locations.
My first instinct was to update the &lt;code&gt;manifest.yml&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; section with a &lt;code&gt;PYTHONPATH&lt;/code&gt; variable that would add this additional location to the Python path but that would not stick.
Using &lt;code&gt;cf set-env&lt;/code&gt; to update the variable after the fact also did not work.&lt;/p&gt;
&lt;p&gt;The environment variable was already set and consumed before we could apply our changes! The cause for this is the buildpack. The &lt;code&gt;python_buildpack&lt;/code&gt; I was using was explicitly setting the &lt;code&gt;PYTHONPATH&lt;/code&gt; and by the time we applied our changes it was already to late for our changes to take effect.&lt;/p&gt;
&lt;p&gt;Thankfully, Cloud Foundry buildpacks have a solution for this.
You can add a &lt;code&gt;.profile&lt;/code&gt; file to the root of your project (from where &lt;code&gt;cf push&lt;/code&gt; runs) and use that to run scripts during the release stage of the buildpack.&lt;/p&gt;
&lt;p&gt;The contents of the &lt;code&gt;.profile&lt;/code&gt; ended up looking like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/submodules/my-module&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the app is now deployed the buildpack will ensure that the &lt;code&gt;PYTHONPATH&lt;/code&gt; is set correctly and the rest of the app can load the additional submodules.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.cloudfoundry.org/buildpacks/understand-buildpacks.html&quot;&gt;Working with buildpacks in Cloud Foundry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Fri, 18 Oct 2024 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/cloud-foundry-buildpack-environment/</guid>
    </item>
    <item>
      <title>Fairphone 5 app switcher fix</title>
      <link>https://harre.dev/blog/fairphone-5-app-switcher-fix/</link>
      <description>&lt;h1&gt;Fairphone 5 app switcher fix&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Turn of Desktop mode in Settings -&amp;gt; Display -&amp;gt; Desktop mode&lt;/p&gt;
&lt;p&gt;Putting this here in case the forum gets cleaned or closes or who knows what.
Quick one here for you Fairphone 5 users.&lt;/p&gt;
&lt;p&gt;A while ago I wrote about my experience with the Fairphone 5 and that it was &amp;quot;Meh&amp;quot; at best due to some pretty annoying software issues.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://harre.dev/blog/six-months-with-the-fairphone&quot;&gt;Here is a link to that previous post.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Updates did not fix the issue since then, but an &lt;a href=&quot;https://forum.fairphone.com/t/latest-update-broke-multitasking-pane/105558/56&quot;&gt;observant user on the Fairphone forum&lt;/a&gt; noticed when his phone started acting up.
It has something to do with the &amp;quot;Desktop mode&amp;quot; that can be enabled via Settings -&amp;gt; Display -&amp;gt; Desktop mode.&lt;/p&gt;
&lt;p&gt;I had played around with the desktop mode a bit when I got my phone, but it isn&#39;t all that great and kinda buggy (this setting is not hidden behind the Developer Options!).
Of course I didn&#39;t turn it back off after deciding that the desktop was not in a usable state and so my problems persisted.&lt;/p&gt;
&lt;p&gt;Leaving that setting enabled appears to mess up things in the not-Desktop-mode!&lt;/p&gt;
&lt;p&gt;After turning it off all my app switcher issues with third-party launchers went away.
My only other gripe with the device also solved itself, I got rid of Google Pay after getting fed up with the flaky NFC behavior it shows on about half the payments I attempt.
Bonus: also great for privacy.&lt;/p&gt;
&lt;p&gt;Official support was sadly completely useless throughout all of this. It always ended in &amp;quot;Thank you for your feedback&amp;quot; and that was it.&lt;/p&gt;
&lt;p&gt;Well it appears my Android experience is saved and I hope they fix the desktop mode or just pull the feature all together because it&#39;s causing a pretty nasty problem for those enabling this setting.&lt;/p&gt;
&lt;p&gt;For now it&#39;s all good though.&lt;/p&gt;
</description>
      <pubDate>Mon, 14 Oct 2024 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/fairphone-5-app-switcher-fix/</guid>
    </item>
    <item>
      <title>Are you failing enough?</title>
      <link>https://harre.dev/blog/are-you-failing-enough/</link>
      <description>&lt;h1&gt;Are you failing enough?&lt;/h1&gt;
&lt;p&gt;The process of creating software, compared to other manufacturing processes, is a little bit special. One unique property of a software product is that it can be changed easily and (relatively) cheaply.&lt;/p&gt;
&lt;p&gt;Over in the physical world, changing a product is not so easy. Supply chains, inventory, machinery, whole factories, who knows what&#39;s involved that is either difficult to change quickly and/or prohibitively expensive to change.&lt;/p&gt;
&lt;p&gt;So what about this failing more often? Well if you have the ability to quickly change your software product, you can also run A LOT of experiments!&lt;/p&gt;
&lt;p&gt;The ability to change whenever you want though, that&#39;s something that needs to created and maintained. Running an experiment without some safety nets is quite the risk if you can&#39;t undo the changes quickly. The best results from your experiments will come from real world use-cases with real users in the production environment. It goes without saying that accidentally messing up a live system that is used actively is something we all want to avoid.&lt;/p&gt;
&lt;h2&gt;The 10-minute build (but preferably faster)&lt;/h2&gt;
&lt;p&gt;I guess we can call this step one. Automate your entire build and deploy process and make it &lt;strong&gt;fast&lt;/strong&gt;, like really fast. If you deploy something broken, you can quickly pave over it with a new version if you have to. So this will give you some agility. That thing you changed and deployed not really working out? Undo it (or fix it) and re-deploy.&lt;/p&gt;
&lt;p&gt;The 10-minute mark has another advantage. If you can build fast enough (or fail really quickly), you can avoid context switching. If building and deploying takes long, you (or your team members) might want to pick up some other task while the build is running (switching contexts to this new task!). Build broken? Here comes that context switch &lt;strong&gt;again&lt;/strong&gt; to get back to what you had built before that other task was picked up. Switching between tasks is very costly and getting back into the groove can take at least 15 minutes.&lt;/p&gt;
&lt;p&gt;In short, &lt;a href=&quot;https://en.wikipedia.org/wiki/Human_multitasking&quot;&gt;context switching&lt;/a&gt; is pretty wasteful. Complete a task before picking up something else. Fast builds greatly help staying focused on the task at hand.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;You are testing your code automatically in that pipeline right? Get that test coverage up and ensure that when you introduce changes, you&#39;re not accidentally breaking something somewhere in your app.&lt;/p&gt;
&lt;p&gt;Speed also applies to your test suite. Make it fast! Lots and lots of small unit tests that run in seconds complemented by some end-to-end tests but keep it fast. Especially while writing code, if you have to wait for those unit tests to complete, something needs improving.&lt;/p&gt;
&lt;p&gt;Something broken? We want to know ASAP. Preferably before we commit anything, break the build and hold up someone else that also wants to deploy stuff.&lt;/p&gt;
&lt;h2&gt;Start failing!&lt;/h2&gt;
&lt;p&gt;Now that you have indicators for the condition of your product (using tests) and the speed to quickly deploy changes without breakage (&amp;quot;Go fast and break stuff&amp;quot; is terrible advice anyway...), you are able to change your product at any time, safely and consistently.&lt;/p&gt;
&lt;p&gt;Try out some of the more &amp;quot;out there&amp;quot; ideas that you&#39;ve collected from users or within the team. Break them down into small little experiments and test them out in the real world.&lt;/p&gt;
&lt;p&gt;Don&#39;t want to burden your whole user base with new stuff all the time? There&#39;s A/B testing. Or even better, introduce a Beta program in your application that users can opt in to. Users that do will be able to see and use whatever you can cook up! Hide all the experimental stuff behind that Beta flag and let the curious crowd give you early feedback.&lt;/p&gt;
&lt;p&gt;Things not working out? Instead of calling it a failure, call it a job well done, you&#39;ve learned something new about how your application was used and the desires of your users.&lt;/p&gt;
&lt;p&gt;And best of all, you can roll back whatever you&#39;ve attempted and all is well again. Just keep an eye on those users. If you move things around all the time they&#39;re going to get fed up and either leave if they can, or complain endlessly about it.&lt;/p&gt;
&lt;p&gt;Software architecture also plays a part in this whole story, if you&#39;ve somehow ended up with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern#Software_engineering_anti-patterns&quot;&gt;big ball of mud&lt;/a&gt;, you might want to look into refactoring with the aid of some test-driven-development to create something more adaptable.&lt;/p&gt;
&lt;p&gt;To conclude all this, a software product, given the right conditions, lets you experiment to your hearts content. Start putting that ability to good use by releasing small changes more often and faster. If you happen to stray away from your users needs and desires, you can always go back.&lt;/p&gt;
</description>
      <pubDate>Wed, 02 Oct 2024 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/are-you-failing-enough/</guid>
    </item>
    <item>
      <title>You build it, you run it... but what exactly?</title>
      <link>https://harre.dev/blog/you-build-it-you-run-it/</link>
      <description>&lt;h1&gt;You build it, you run it... but what exactly?&lt;/h1&gt;
&lt;p&gt;&amp;quot;You build it, you run it&amp;quot;, easy to say, but, depending on your developer experience and platform capability... not at all easy.
What am I expected to &amp;quot;build&amp;quot; and what should I &amp;quot;run&amp;quot;? Let&#39;s take a look.&lt;/p&gt;
&lt;p&gt;Let&#39;s start with this overview that I show teams I engage with during their onboarding and where their responsibilities begin and what not to worry about (but can still affect them of course).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://harre.dev/blog/you-build-it-you-run-it/value-line.png&quot; alt=&quot;The value line&quot;&gt;&lt;/p&gt;
&lt;p&gt;So you&#39;re a new team with a great idea, and you get the green light from management to start building.
In the traditional world you would need to take care of many things. Many of those things will contribute nothing to the actual value you are trying to create.&lt;/p&gt;
&lt;p&gt;Imagine having to set up a server, from scratch, operating system, networks, security, runtimes, the whole lot of it. It might work with the right people and context, but if you mix in an IT department that governs the hardware and connections etc... you&#39;ll be in for a tough time.
And of course all of that stuff needs maintenance and updates, scaling, patches, fixes... And you&#39;ve not built anything your users can actually use!
We&#39;re still talking about just an app, it&#39;ll probably have a database and maybe other services that all need maintenance and updates.&lt;/p&gt;
&lt;p&gt;Moving up a layer into a more virtualized world you can get rid of some of that busywork that goes into maintaining your own servers but that VM still needs all the work of patching and maintenance that any other server would need.&lt;/p&gt;
&lt;p&gt;So if we say &amp;quot;you build it, you run it&amp;quot; in this context, the cognitive load is crazy, the team would need a lot of different skill sets to maintain and run everything.&lt;/p&gt;
&lt;p&gt;One way to deal with all this was (still is in some places probably?) to offload all that server stuff to a separate IT department and let developers build the software. That split comes with a whole suite of problems, with the most prominent one being difference in goals between the two teams.
What do admins want? Stable systems. What do developers want? Ship features. There will be constant conflict between the two, and it results in the classic &amp;quot;throw it over the wall&amp;quot; type of workflow that leads to heated arguments... &amp;quot;You&#39;re not deploying it right!&amp;quot;, &amp;quot;Yeah well your app is broken!&amp;quot;&lt;/p&gt;
&lt;p&gt;This is more &amp;quot;we build it, they run it&amp;quot;. Definitely don&#39;t want that.&lt;/p&gt;
&lt;p&gt;Let&#39;s move up another layer, containers! Now we&#39;re moving in the right direction. There&#39;s no more &amp;quot;machine&amp;quot; to speak of, and we&#39;re shipping neatly packaged software components that run on some kind of shared foundation that doesn&#39;t really care what&#39;s inside the container.
The team is managing a lot less by this point. Looking at the first image, we&#39;re in a sort of gray area between runtimes and middlewares.&lt;/p&gt;
&lt;p&gt;We&#39;re now at a level where it is becoming quite manageable but if your team is also running their own databases and what not with backups and patches and maintenance it can still be quite a bit of work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://harre.dev/blog/you-build-it-you-run-it/docker-meme.jpg&quot; alt=&quot;Docker meme&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;centered-label&quot;&gt;I&#39;d love to credit this meme, but I have no idea where it came from.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s just one problem though...&lt;/p&gt;
&lt;p&gt;Where does all that work that we&#39;ve been casually discarding actually go? That IT department that we mentioned earlier is one place it could go, but then we&#39;ve just moved the work from one place to another.
Handling all those apps and databases for any number of teams that exist in an organization is not realistic. We&#39;re still not in a real position to proclaim &amp;quot;You build it, you run it&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Platform engineering&lt;/h2&gt;
&lt;p&gt;Welcome to the current times, where organizations are realizing that in order to ship features, teams should focus on the right things. Which, in case of developer teams that build end-user products, is their apps, and their data. Additionally, that &amp;quot;other&amp;quot; work we came across will need to be seen as valuable, but for a different userbase. Those users? the developers building apps!&lt;/p&gt;
&lt;p&gt;So, the platform that is hosting these apps is also a product. Just like a &amp;quot;normal&amp;quot; app, it should cater to the needs of its users. At the platform level, going from traditional IT to this new platform-as-product approach is a huge shift.
This team running the platform will have their own responsibilities and ownership. Developers want to ship apps, what should the platform provide to facilitate this need? There should also be a clear boundary between what developer teams do, and what the platform team does. Platform teams should not have to know anything about the inner workings of the apps it is hosting. Same for backing services such as databases, the platform does not care about the table structures or queries, only that the databases are up and running and backed-up properly.&lt;/p&gt;
&lt;p&gt;Standardizing things is key, it&#39;s impossible to provide a bespoke service for many teams and still be able to manage and maintain everything. Same goes for automation, whatever manual processes exist, they should be automated. Not just to remove the manual toil of executing these tasks, but also to make them less error-prone, faster and repeatable.
So what should be standardized? As with anything, it depends on the needs of the teams on the platform, but some good examples are authentication systems, databases, queues and other backing services of various types and sizes. These systems form a catalog of services that the developer teams can choose from.&lt;/p&gt;
&lt;p&gt;At first, you might still have some manual steps here and there but at scale, the developer teams should be able to request services from the catalog as they desire. This way, responsibility ends up in the right places, developers own their apps and data, the platform owns the operation of the runtimes and services.
A platform that offers these capabilities will be a complex product and will require substantial engineering power from a dedicated team but in return will provide the developer teams with the agility they need to be able to keep up with the ever-changing requirements of the business and end-users.&lt;/p&gt;
&lt;p&gt;An example of such capabilities can be found in the hyperscale cloud providers such as AWS, Google Cloud and Azure. A broad catalog of services to choose from and use, but that&#39;s also where it ends, any additional value creation should come from you as a user of those services.&lt;/p&gt;
&lt;p&gt;So self-service is a key component, documentation for all that self-service stuff is also important. You don&#39;t want to spend all your time answering questions that could be answered by &lt;a href=&quot;https://harre.dev/blog/your-org-could-use-a-cookbook&quot;&gt;a cookbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something else is needed though, if you are going to be developing your platform as a product, the obvious thing would be to a have a product manager on the team.
This will probably be the biggest switch for organizations that want to start building a platform for themselves.
The platform will have its own backlog and iterations, demos, documentation. And why stop there? You might also want to have someone with design experience to do research on what features are most in demand. What about marketing? To grow your capability as a platform, you&#39;ll need users. Spread the word on all the work you are doing to enable other teams.
Does this all sound familiar? It should, because that&#39;s what you do for any product.&lt;/p&gt;
&lt;p&gt;And we can keep going! Golden paths! Make the right way to work on the platform very easy, but venturing off the beaten paths very hard. Standardized ways of deploying combined with application templates let developer teams build MVPs in a matter of days or even hours.
Start facilitating an internal community that supports each other (and helps keep the support pressure low from the platform team!). The developer experience sky is the limit.&lt;/p&gt;
&lt;p&gt;We&#39;ve gone a bit off-topic with all this platform engineering and developer experience but, I think it&#39;s safe to say that when you want to excite a team with &amp;quot;You build it, you run it&amp;quot;, it needs to be very clear what exactly is being built, and what is being run by the people you&#39;re talking to.
Cognitive load is a real thing if it becomes too high, happiness, performance, speed and efficiency will all suffer.&lt;/p&gt;
&lt;h2&gt;Building and running&lt;/h2&gt;
&lt;p&gt;In conclusion, telling teams &amp;quot;you build it, you run it&amp;quot; can only be successful if actually letting the team own and run everything is feasible or risk the team drowning in work that does not actually create any value for anyone. In practice, it really only works with a dedicated platform that does a lot of heavy lifting to give the teams that use the platform the freedom and agility to meet changing business and user requirements.
The better this internal platform becomes the more developers it can service. And as with any product, start small and make well researched decisions when adding capabilities.
Maybe set up an enabling team that can kickstart teams that are onboarding and provide them all the tools to be successful.&lt;/p&gt;
&lt;p&gt;Setting all this up is a long process that also requires a shift in company culture that goes from siloed command-control structures to autonomous teams that actually &lt;strong&gt;build it, run it, and even own it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Curious about ways to get there? Get in touch 🙂&lt;/p&gt;
</description>
      <pubDate>Fri, 13 Sep 2024 02:00:00 GMT</pubDate>
      <dc:creator>Sander Harrewijnen</dc:creator>
      <guid>https://harre.dev/blog/you-build-it-you-run-it/</guid>
    </item>
  </channel>
</rss>